---
layout: post
title:  "The spin-up period: Useful resources I looked at before I started"
date:   2023-09-14 12:00:23 +0100
categories: um resources getting-started
---

When I found out I would be running the UM, my knowledge was limited to other people discussing how annoying it was to make it work. I had done a bit of messing around with other weather models such as WRF and MPAS (which are a bit less GUI-y and a bit more typing numbers into files according to a guide), and this had been on university-level high-performance computers - where the queue process was a bit simpler than for national-scale HPC facilities. 

Learning about how ARCHER2 works, as well as the workflow for running the UM, was a pretty daunting task, but I thought that a post outlining the key resources I used to get started with the topic might be a good springboard for anyone else starting a similar journey.

So firstly, where did I find these materials? There are two places that I found particularly helpful: the [ARCHER2 website](https://www.archer2.ac.uk/), and resources designed by [NCAS's Computational Modelling Service (CMS) team](https://cms.ncas.ac.uk/).

## The ARCHER2 Website
To start off with, the ARCHER2 website has some excellent guides for getting started with setting up accounts and learning how to use the service. [This blog post](https://www.archer2.ac.uk/news/2022/05/18/where-to-start.html) in particular outlines a lot of really useful resources as well as a flowchart outlining how to go from very little knowledge about high-performance computing to being a pro ARCHER2 user ðŸ˜Ž In fact, the post is so good that it almost makes this one redundant, except for the context I can provide about what in particular is very helpful if you're looking to use the UM in particular. I haven't been through every resource listed there, but the ones that I found particularly helpful are the [ARCHER2 Slurm Scheduler Guide](https://docs.archer2.ac.uk/user-guide/scheduler/) because it has all the key highlights about the different ways you can schedule on ARCHER2, the [Hitchhiker's Guide To ARCHER2](https://www.archer2.ac.uk/training/courses/220302-hitchhikers-guide/) (which finally taught me what a compute unit is), and crucially, the directory of [past ARCHER2 training materials](https://www.archer2.ac.uk/training/materials/).

That list of previous training workshops and presentations is pretty great and has some hints to the level of the courses available. For the purposes of being a UM user, I have pretty much just done "green" courses - designed for beginners, because I was (and possibly still am) a bit of a beginner, and I think they're pitched at a really reasonable level. In particular, the courses I found really great were from the "carpentries" set: namely, [HPC Carpentry](https://www.archer2.ac.uk/training/courses/220726-hpc-carpentry/) and [Software Carpentry](https://software-carpentry.org/lessons/index.html). Both have all the resources you need set up online and can easily be followed remotely once you have access to ARCHER2.

## Some Useful Software Carpentries

HPC Carpentry is a real essential - Day 1 might be skippable if you are already familiar with the terminal, but Day 2 is crucial for learning about how to submit tasks, what bits of HPCs do different parts, and how to understand how efficient code is. (Admittedly I'm still not quite sure how to do that last part, other than anxiously checking how quickly my Compute Unit allocation is depleting.)

I wasn't sure whether I would need to do all of Software Carpentry as well - with the UM being quite a specific piece of software in itself - but there were some really useful elements that I am glad I had a look at. [This link](https://software-carpentry.org/lessons/index.html) will take you to the index of all of the lessons they have available to study along with online. Of these, you can pick and choose the ones that seem relevant - the unix shell overlaps with HPC Carpentry a bit, and the Python/R-specific lessons aren't necessarily directly relevant for running the UM, but I found out some useful hints by following the courses on [Version Control with Git](https://swcarpentry.github.io/git-novice/) and [Automation and Make](http://swcarpentry.github.io/make-novice/).

When running the UM, you won't use Git directly - instead the version control of UM suites (that's a whole post in itself, but for now a suite is one particular setup of the Unified Model) is controlled by something called `fcm`, which wraps a different type of version control called Subversion (or `svn`). Subversion has some important differences to Git (while git is a distributed form of version control, svn is centralised), but some of the key principles - branches, commits, logs, etc. - are rather similar. In a similar vein, the UM workflow doesn't use Makefiles, but it uses software called Cylc and Rose to control the tasks that are completed as part of a workflow. However, some of the principles of automation that are covered in the tutorial are quite helpful for unpacking material about Rose and Cylc later on.

## NCAS to the rescue!
Now, we've talked about UM-related skills - understanding automation, version control, and using ARCHER2. But when it comes to actually learning how to use the UM, particularly with ARCHER2, NCAS are the centre of a huge amount of knowledge. [The CMS website](https://cms.ncas.ac.uk) has several guides to getting set up on PUMA, a list of model configurations that are designed to be used on ARCHER2, and useful links to more in-depth guides on Rose and Cylc. They also have a specific UM training course which you can [follow online for free](https://ncas-cms.github.io/um-training/) or wait for the next in-person workshop to come around, which will be listed [here](https://ncas.ac.uk/study-with-us/introduction-to-unified-model/). It is very much an introduction - and some of the later elements of the online course seem to be a bit broken on ARCHER2 at the moment, possibly due to the mid-year software upgrade that ARCHER2 underwent - but it is a really great way to get started and understand how the Rose and Cylc GUIs work and get some basic model configurations set up. I'd be very impressed with anyone managing to use the UM without working through this first (or something similar at the Met Office). 

The second extremely useful thing that NCAS CMS provide are the [helpdesk forums](https://cms-helpdesk.ncas.ac.uk/). Here you can find pretty much every question that the modelling team have been asked in the last two years, which is pretty helpful. If you get an error, you can usually find someone who's had it before using the search function - often in three or four different ways. Some users leave incredibly helpful step-by-step instructions once they have figured out how to make something work, and even just seeing the discussions various UM users are having with NCAS staff can be really productive to learn about the debugging process and the logical ways of figuring out what's going wrong with your setup. If this overwhelmingly positive description is not enough, perhaps my user stats (from just the past six weeks!) are testament to how useful the forums are:

![frans-cms-forum-user-stats](../assets/img/cms_forum_user_stats.png){:class="img-responsive"}

I am somewhat alarmed that this data was being tracked, and also that I have been so transparently revealed as a forum lurker with a measly 5 posts or something similar. (Still, it's very useful to look at approximately 97 topics and know that I'm asking a question that I don't believe has been addressed in any of those.)

Anyway, I hope that some of this has been useful to anyone starting out. If there's anything else I've missed please email me at let me know - maybe I can edit these posts and add more... and who knows, maybe there's more useful stuff I'll discover on the journey!